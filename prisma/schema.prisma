generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id           Int                        @id @default(autoincrement())
  name              String                     @db.VarChar(50)
  nickname          String                     @db.VarChar(50)
  email             String                     @unique @db.VarChar(255)
  social_type       String                     @db.VarChar(50)
  status            Boolean
  inactive_date     DateTime?
  created_at        DateTime                   @default(now())
  updated_at        DateTime                   @updatedAt
  role              Role                       @default(USER)
  announcements     Announcement[]
  sentNotifications Notification[]             @relation("ActorNotifications")
  notifications     Notification[]             @relation("UserNotifications")
  subscribers       NotificationSubscription[] @relation("NotificationTargetPrompter")
  subscriptions     NotificationSubscription[] @relation("NotificationSubscriber")
  prompts           Prompt[]
  prompt_likes      PromptLike[]
  prompt_reports    PromptReport[]             @relation("UserReport")
  purchases         Purchase[]
  refreshTokens     RefreshToken[]
  reviews           Review[]
  settlements       Settlement[]               @relation("UserSettlements")
  tips              Tip[]
  profileImage      UserImage?
  intro             UserIntro?
  sns_list          UserSNS[]
  withdraw_requests WithdrawRequest[]
}

model UserIntro {
  intro_id    Int      @id @default(autoincrement())
  user_id     Int      @unique
  description String   @db.VarChar(255)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model UserHistory {
  history_id Int      @id @default(autoincrement())
  user_id    Int
  history    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserSNS {
  sns_id      Int      @id @default(autoincrement())
  user_id     Int
  url         String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [user_id])

  @@index([user_id], map: "UserSNS_user_id_fkey")
}

model Following {
  follow_id    Int      @id @default(autoincrement())
  follower_id  Int
  following_id Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@index([follower_id], map: "Following_follower_id_fkey")
  @@index([following_id], map: "Following_following_id_fkey")
}

model PromptLike {
  like_id    Int      @id @default(autoincrement())
  user_id    Int
  prompt_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  prompt     Prompt   @relation(fields: [prompt_id], references: [prompt_id])
  user       User     @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, prompt_id])
  @@index([prompt_id], map: "PromptLike_prompt_id_fkey")
}

model Announcement {
  announcement_id Int      @id @default(autoincrement())
  writer_id       Int
  title           String
  content         String   @db.Text
  is_visible      Boolean
  file_url        String?  @db.VarChar(255)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  writer          User     @relation(fields: [writer_id], references: [user_id])

  @@index([writer_id], map: "Announcement_writer_id_fkey")
}

model Tip {
  tip_id     Int      @id @default(autoincrement())
  writer_id  Int
  title      String
  content    String   @db.Text
  is_visible Boolean
  file_url        String?  @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  writer     User     @relation(fields: [writer_id], references: [user_id])

  @@index([writer_id], map: "Tip_writer_id_fkey")
}

model NotificationSubscription {
  id          Int      @id @default(autoincrement())
  user_id     Int
  prompter_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  prompter    User     @relation("NotificationTargetPrompter", fields: [prompter_id], references: [user_id])
  user        User     @relation("NotificationSubscriber", fields: [user_id], references: [user_id])

  @@unique([user_id, prompter_id])
  @@index([prompter_id], map: "NotificationSubscription_prompter_id_fkey")
}

model Notification {
  notification_id Int              @id @default(autoincrement())
  user_id         Int?
  content         String           @db.Text
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  actor_id        Int?
  link_url        String?
  type            NotificationType
  actor           User?            @relation("ActorNotifications", fields: [actor_id], references: [user_id])
  user            User?            @relation("UserNotifications", fields: [user_id], references: [user_id])

  @@index([user_id], map: "Notification_user_id_fkey")
  @@index([type])
  @@index([actor_id], map: "Notification_actor_id_fkey")
}

model Message {
  message_id  Int       @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  title       String
  body        String    @db.Text
  is_read     Boolean   @default(false)
  read_at     DateTime?
  is_deleted  Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@index([receiver_id], map: "Message_receiver_id_fkey")
  @@index([sender_id], map: "Message_sender_id_fkey")
}

model Inquiry {
  inquiry_id  Int           @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  type        InquiryType
  status      InquiryStatus
  title       String
  content     String        @db.Text
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  @@index([receiver_id], map: "Inquiry_receiver_id_fkey")
  @@index([sender_id], map: "Inquiry_sender_id_fkey")
}

model InquiryReply {
  reply_id    Int      @id @default(autoincrement())
  inquiry_id  Int
  receiver_id Int
  content     String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([inquiry_id], map: "InquiryReply_inquiry_id_fkey")
  @@index([receiver_id], map: "InquiryReply_receiver_id_fkey")
}

model WithdrawRequest {
  withdraw_request_id Int      @id @default(autoincrement())
  user_id             Int
  amount              Int
  status              Status
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  user                User     @relation(fields: [user_id], references: [user_id])

  @@index([user_id], map: "WithdrawRequest_user_id_fkey")
}

model Prompt {
  prompt_id      Int            @id @default(autoincrement())
  user_id        Int
  title          String         @db.Text
  prompt         String         @db.Text
  prompt_result  String         @db.Text
  has_image      Boolean
  description    String         @db.Text
  usage_guide    String         @db.Text
  price          Int
  is_free        Boolean
  downloads      Int
  views          Int
  likes          Int
  review_counts  Int
  rating_avg     Float
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  inactive_date  DateTime?
  download_url   String         @db.Text
  user           User           @relation(fields: [user_id], references: [user_id])
  images         PromptImage[]
  prompt_likes   PromptLike[]
  models         PromptModel[]
  prompt_reports PromptReport[] @relation("PromptReport")
  tags           PromptTag[]
  purchases      Purchase[]
  reviews        Review[]

  @@index([user_id], map: "Prompt_user_id_fkey")
}

model PromptModel {
  promptmodel_id Int    @id @default(autoincrement())
  prompt_id      Int
  model_id       Int
  model          Model  @relation(fields: [model_id], references: [model_id])
  prompt         Prompt @relation(fields: [prompt_id], references: [prompt_id])

  @@index([model_id], map: "PromptModel_model_id_fkey")
  @@index([prompt_id], map: "PromptModel_prompt_id_fkey")
}

model Model {
  model_id      Int           @id @default(autoincrement())
  name          String        @db.VarChar(50)
  prompt_models PromptModel[]
}

model PromptTag {
  prompttag_id Int    @id @default(autoincrement())
  prompt_id    Int
  tag_id       Int
  prompt       Prompt @relation(fields: [prompt_id], references: [prompt_id])
  tag          Tag    @relation(fields: [tag_id], references: [tag_id])

  @@index([prompt_id], map: "PromptTag_prompt_id_fkey")
  @@index([tag_id], map: "PromptTag_tag_id_fkey")
}

model Tag {
  tag_id      Int         @id @default(autoincrement())
  name        String      @db.VarChar(50)
  prompt_tags PromptTag[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(500)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@index([userId], map: "RefreshToken_userId_fkey")
}

model UserImage {
  id         Int      @id @default(autoincrement())
  url        String   @db.VarChar(500)
  userId     Int      @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model PromptImage {
  image_id    Int      @id @default(autoincrement())
  prompt_id   Int
  image_url   String   @db.Text
  order_index Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  prompt      Prompt   @relation(fields: [prompt_id], references: [prompt_id])

  @@index([prompt_id], map: "PromptImage_prompt_id_fkey")
}

model PromptReport {
  report_id   Int        @id @default(autoincrement())
  prompt_id   Int
  created_at  DateTime   @default(now())
  description String
  report_type ReportType
  reporter_id Int
  is_read     Boolean    @default(false)
  prompt      Prompt     @relation("PromptReport", fields: [prompt_id], references: [prompt_id])
  reporter    User       @relation("UserReport", fields: [reporter_id], references: [user_id])

  @@index([prompt_id], map: "PromptReport_prompt_id_fkey")
  @@index([reporter_id], map: "PromptReport_reporter_id_fkey")
}

model Purchase {
  purchase_id Int      @id @default(autoincrement())
  user_id     Int
  prompt_id   Int
  amount      Int
  is_free     Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  payment     Payment?
  prompt      Prompt   @relation(fields: [prompt_id], references: [prompt_id])
  user        User     @relation(fields: [user_id], references: [user_id])

  @@index([prompt_id], map: "Purchase_prompt_id_fkey")
  @@index([user_id], map: "Purchase_user_id_fkey")
}

model Payment {
  payment_id   Int              @id @default(autoincrement())
  purchase_id  Int              @unique
  status       Status
  provider     Payment_provider
  merchant_uid String           @unique
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  imp_uid      String           @unique
  purchase     Purchase         @relation(fields: [purchase_id], references: [purchase_id], onDelete: Cascade)
  settlement   Settlement?
}

model Settlement {
  settlement_id Int      @id @default(autoincrement())
  payment_id    Int      @unique
  amount        Int
  fee           Int
  status        Status
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user_id       Int
  payment       Payment  @relation(fields: [payment_id], references: [payment_id])
  user          User     @relation("UserSettlements", fields: [user_id], references: [user_id])

  @@index([user_id])
}

model Review {
  review_id  Int      @id @default(autoincrement())
  rating     Float
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    Int
  prompt_id  Int
  prompt     Prompt   @relation(fields: [prompt_id], references: [prompt_id])
  user       User     @relation(fields: [user_id], references: [user_id])

  @@index([prompt_id], map: "Review_prompt_id_fkey")
  @@index([user_id], map: "Review_user_id_fkey")
}

enum Status {
  Pending
  Succeed
  Failed
}

enum Role {
  USER
  ADMIN
}

enum InquiryType {
  buyer
  non_buyer
}

enum InquiryStatus {
  waiting
  read
}

enum ReportType {
  FALSE_OR_EXAGGERATED
  COPYRIGHT_INFRINGEMENT
  INAPPROPRIATE_OR_HARMFUL
  ETC
}

enum NotificationType {
  FOLLOW
  NEW_PROMPT
  INQUIRY_REPLY
  ANNOUNCEMENT
  REPORT
}

enum Payment_provider {
  kakaopay
  tosspay
}
