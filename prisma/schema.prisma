generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            Int               @id @default(autoincrement())
  name               String            @db.VarChar(50)
  nickname           String            @db.VarChar(50)
  email              String            @unique @db.VarChar(255)
  social_type        String            @db.VarChar(50)
  status             Boolean
  inactive_date      DateTime?
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  role               Role              @default(USER)
  announcements      Announcement[]
  followings         Following[]       @relation("Follower")
  followers          Following[]       @relation("Following")
  inquiries_received Inquiry[]         @relation("InquiryReceiver")
  inquiries          Inquiry[]         @relation("InquirySender")
  replies            InquiryReply[]
  messagesReceived   Message[]         @relation("MessageReceiver")
  messagesSent       Message[]         @relation("MessageSender")
  notifications     Notification[]     @relation("UserNotifications") // 내가 받은 알림들
  sentNotifications Notification[]     @relation("ActorNotifications") // 내가 유발한 알림들
  prompts            Prompt[]
  prompt_likes       PromptLike[]
  prompt_reports     PromptReport[]    @relation("UserReport")
  purchases          Purchase[]
  refreshTokens      RefreshToken[]
  reviews            Review[]
  tips               Tip[]
  profileImage       UserImage?
  intro              UserIntro?
  sns_list           UserSNS[]
  withdraw_requests  WithdrawRequest[]
  subscriptions      NotificationSubscription[] @relation("NotificationSubscriber")
  subscribers        NotificationSubscription[] @relation("NotificationTargetPrompter")
}

model UserIntro {
  intro_id    Int      @id @default(autoincrement())
  user_id     Int      @unique
  description String   @db.VarChar(255)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model UserHistory {
  history_id Int      @id @default(autoincrement())
  user_id    Int
  history    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserSNS {
  sns_id      Int      @id @default(autoincrement())
  user_id     Int
  url         String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [user_id])

  @@index([user_id], map: "UserSNS_user_id_fkey")
}

model Following {
  follow_id    Int      @id @default(autoincrement())
  follower_id  Int
  following_id Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  follower     User     @relation("Follower", fields: [follower_id], references: [user_id])
  following    User     @relation("Following", fields: [following_id], references: [user_id])

  @@index([follower_id], map: "Following_follower_id_fkey")
  @@index([following_id], map: "Following_following_id_fkey")
}

model PromptLike {
  like_id    Int      @id @default(autoincrement())
  user_id    Int
  prompt_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  prompt     Prompt   @relation(fields: [prompt_id], references: [prompt_id])
  user       User     @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, prompt_id])
  @@index([prompt_id], map: "PromptLike_prompt_id_fkey")
}

model Announcement {
  announcement_id Int      @id @default(autoincrement())
  writer_id       Int
  title           String
  content         String   @db.Text
  is_visible      Boolean
  file_url        String?  @db.VarChar(255)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  writer          User     @relation(fields: [writer_id], references: [user_id])

  @@index([writer_id], map: "Announcement_writer_id_fkey")
}

model Tip {
  tip_id     Int      @id @default(autoincrement())
  writer_id  Int
  title      String
  content    String   @db.Text
  is_visible Boolean
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  writer     User     @relation(fields: [writer_id], references: [user_id])

  @@index([writer_id], map: "Tip_writer_id_fkey")
}


model NotificationSubscription {
  id           Int      @id @default(autoincrement())
  user_id      Int      // 알림을 받을 사람
  prompter_id  Int      // 프롬프트를 올리는 사람
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user         User     @relation("NotificationSubscriber", fields: [user_id], references: [user_id])
  prompter     User     @relation("NotificationTargetPrompter", fields: [prompter_id], references: [user_id])

  @@unique([user_id, prompter_id])
}



model Notification {
  notification_id Int      @id @default(autoincrement())
  user_id         Int?                                 // 알림 받는 사용자
  type            NotificationType                    // 알림 종류 (enum)
  actor_id        Int?                               // 알림 유발 주체
  content         String   @db.Text
  link_url        String?                            // 클릭 시 이동할 경로
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  user            User?     @relation("UserNotifications", fields: [user_id], references: [user_id])
  actor           User?    @relation("ActorNotifications", fields: [actor_id], references: [user_id])
  
  @@index([user_id], map: "Notification_user_id_fkey")
  @@index([type], map: "Notification_type_idx")
}


model Message {
  message_id  Int       @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  title       String
  body        String    @db.Text
  is_read     Boolean   @default(false)
  read_at     DateTime?
  is_deleted  Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  receiver    User      @relation("MessageReceiver", fields: [receiver_id], references: [user_id])
  sender      User      @relation("MessageSender", fields: [sender_id], references: [user_id])

  @@index([receiver_id], map: "Message_receiver_id_fkey")
  @@index([sender_id], map: "Message_sender_id_fkey")
}

model Inquiry {
  inquiry_id  Int            @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  type        InquiryType
  status      InquiryStatus
  title       String
  content     String         @db.Text
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  receiver    User           @relation("InquiryReceiver", fields: [receiver_id], references: [user_id])
  sender      User           @relation("InquirySender", fields: [sender_id], references: [user_id])
  replies     InquiryReply[]

  @@index([receiver_id], map: "Inquiry_receiver_id_fkey")
  @@index([sender_id], map: "Inquiry_sender_id_fkey")
}

model InquiryReply {
  reply_id    Int      @id @default(autoincrement())
  inquiry_id  Int
  receiver_id Int
  content     String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  inquiry     Inquiry  @relation(fields: [inquiry_id], references: [inquiry_id])
  user        User     @relation(fields: [receiver_id], references: [user_id])

  @@index([inquiry_id], map: "InquiryReply_inquiry_id_fkey")
  @@index([receiver_id], map: "InquiryReply_receiver_id_fkey")
}

model WithdrawRequest {
  withdraw_request_id Int      @id @default(autoincrement())
  user_id             Int
  amount              Int
  status              Status
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  user                User     @relation(fields: [user_id], references: [user_id])

  @@index([user_id], map: "WithdrawRequest_user_id_fkey")
}

model Prompt {
  prompt_id      Int            @id @default(autoincrement())
  user_id        Int
  title          String         @db.Text
  prompt         String         @db.Text
  prompt_result  String         @db.Text
  has_image      Boolean
  description    String         @db.Text
  usage_guide    String         @db.Text
  price          Int
  is_free        Boolean
  downloads      Int
  views          Int
  likes          Int
  review_counts  Int
  rating_avg     Float
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  inactive_date  DateTime?
  download_url   String         @db.Text
  user           User           @relation(fields: [user_id], references: [user_id])
  images         PromptImage[]
  prompt_likes   PromptLike[]
  models         PromptModel[]
  prompt_reports PromptReport[] @relation("PromptReport")
  tags           PromptTag[]
  purchases      Purchase[]
  reviews        Review[]

  @@index([user_id], map: "Prompt_user_id_fkey")
}

model PromptModel {
  promptmodel_id Int    @id @default(autoincrement())
  prompt_id      Int
  model_id       Int
  model          Model  @relation(fields: [model_id], references: [model_id])
  prompt         Prompt @relation(fields: [prompt_id], references: [prompt_id])

  @@index([model_id], map: "PromptModel_model_id_fkey")
  @@index([prompt_id], map: "PromptModel_prompt_id_fkey")
}

model Model {
  model_id      Int           @id @default(autoincrement())
  name          String        @db.VarChar(50)
  prompt_models PromptModel[]
}

model PromptTag {
  prompttag_id Int    @id @default(autoincrement())
  prompt_id    Int
  tag_id       Int
  prompt       Prompt @relation(fields: [prompt_id], references: [prompt_id])
  tag          Tag    @relation(fields: [tag_id], references: [tag_id])

  @@index([prompt_id], map: "PromptTag_prompt_id_fkey")
  @@index([tag_id], map: "PromptTag_tag_id_fkey")
}

model Tag {
  tag_id      Int         @id @default(autoincrement())
  name        String      @db.VarChar(50)
  prompt_tags PromptTag[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(500)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@index([userId], map: "RefreshToken_userId_fkey")
}

model UserImage {
  id         Int      @id @default(autoincrement())
  url        String   @db.VarChar(500)
  userId     Int      @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model PromptImage {
  image_id    Int      @id @default(autoincrement())
  prompt_id   Int
  image_url   String   @db.Text
  order_index Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  prompt      Prompt   @relation(fields: [prompt_id], references: [prompt_id])

  @@index([prompt_id], map: "PromptImage_prompt_id_fkey")
}


model PromptReport {
  report_id     Int      @id @default(autoincrement())
  report_type   ReportType  // enum 타입 사용
  description   String
  prompt_id     Int
  reporter_id   Int
  is_read       Boolean  @default(false)
  created_at    DateTime @default(now())

  prompt   Prompt @relation("PromptReport", fields: [prompt_id], references: [prompt_id])
  reporter User @relation("UserReport", fields: [reporter_id], references: [user_id])
}


model Purchase {
  purchase_id Int      @id @default(autoincrement())
  user_id     Int
  prompt_id   Int
  amount      Int
  is_free     Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  payment     Payment?
  prompt      Prompt   @relation(fields: [prompt_id], references: [prompt_id])
  user        User     @relation(fields: [user_id], references: [user_id])

  @@index([prompt_id], map: "Purchase_prompt_id_fkey")
  @@index([user_id], map: "Purchase_user_id_fkey")
}

model Payment {
  payment_id   Int         @id @default(autoincrement())
  purchase_id  Int         @unique
  status       Status
  provider     String      @db.VarChar(50)
  iamport_uid  String
  merchant_uid String
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  purchase     Purchase    @relation(fields: [purchase_id], references: [purchase_id])
  settlement   Settlement?
}

model Settlement {
  settlement_id Int      @id @default(autoincrement())
  payment_id    Int      @unique
  amount        Int
  fee           Int
  status        Status
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  payment       Payment  @relation(fields: [payment_id], references: [payment_id])
}

model Review {
  review_id  Int      @id @default(autoincrement())
  rating     Float
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    Int
  prompt_id  Int
  prompt     Prompt   @relation(fields: [prompt_id], references: [prompt_id])
  user       User     @relation(fields: [user_id], references: [user_id])

  @@index([prompt_id], map: "Review_prompt_id_fkey")
  @@index([user_id], map: "Review_user_id_fkey")
}

enum Status {
  Pending
  Succeed
  Failed
}

enum Role {
  USER
  ADMIN
}

enum InquiryType {
  buyer
  non_buyer
}

enum InquiryStatus {
  waiting
  read
}

enum ReportType {
  FALSE_OR_EXAGGERATED         // 허위 또는 과장된 콘텐츠
  COPYRIGHT_INFRINGEMENT       // 저작권 및 지적재산권 침해
  INAPPROPRIATE_OR_HARMFUL     // 불쾌하거나 부적절한 내용
  ETC                          // 기타
}

enum NotificationType {
  FOLLOW           // 팔로우 알림
  NEW_PROMPT       // 프롬프트 업로드 알림
  INQUIRY_REPLY    // 문의 답변 알림
  ANNOUNCEMENT     // 시스템 공지
  REPORT           // 내가 등록한 신고가 처리됨
}
