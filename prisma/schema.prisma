// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  Pending
  Succeed
  Failed
}

enum Role {
  USER
  ADMIN
}

model User {
  user_id       Int       @id @default(autoincrement())
  name          String    @db.VarChar(50)
  nickname      String    @db.VarChar(50)
  email         String    @unique @db.VarChar(255)
  social_type   String    @db.VarChar(50)
  status        Boolean
  inactive_date DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  role          Role      @default(USER)

  // Relations
  profile            UserProfile?
  profileImage       UserImage?
  sns_list           UserSNS[]
  followings         Following[]       @relation("Follower")
  followers          Following[]       @relation("Following")
  announcements      Announcement[]
  tips               Tip[]
  notifications      Notification[]
  messagesSent       Message[]         @relation("MessageSender")
  messagesReceived   Message[]         @relation("MessageReceiver")
  inquiries          Inquiry[]         @relation("InquirySender")
  inquiries_received Inquiry[]         @relation("InquiryReceiver")
  replies            InquiryReply[]
  withdraw_requests  WithdrawRequest[]
  prompts            Prompt[]
  prompt_likes       PromptLike[]
  prompt_reports     PromptReport[]
  purchases          Purchase[]
  reviews            Review[]
  refreshTokens      RefreshToken[]
}

model UserProfile {
  profile_id  Int      @id @default(autoincrement())
  user_id     Int      @unique
  description String   @db.VarChar(255)
  history     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [user_id])
}

model UserSNS {
  sns_id      Int      @id @default(autoincrement())
  user_id     Int
  url         String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [user_id])
}

model Following {
  follow_id    Int      @id @default(autoincrement())
  follower_id  Int
  following_id Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  follower  User @relation("Follower", fields: [follower_id], references: [user_id])
  following User @relation("Following", fields: [following_id], references: [user_id])
}

model PromptLike {
  like_id    Int      @id @default(autoincrement())
  user_id    Int
  prompt_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [user_id], references: [user_id])
  prompt Prompt @relation(fields: [prompt_id], references: [prompt_id])

  @@unique([user_id, prompt_id])
}

model Announcement {
  announcement_id Int      @id @default(autoincrement())
  writer_id       Int
  title           String
  content         String   @db.Text
  is_visible      Boolean
  file_url        String?  @db.VarChar(255)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  writer User @relation(fields: [writer_id], references: [user_id])
}

model Tip {
  tip_id     Int      @id @default(autoincrement())
  writer_id  Int
  title      String
  content    String   @db.Text
  is_visible Boolean
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  writer User @relation(fields: [writer_id], references: [user_id])
}

model Notification {
  notification_id Int      @id @default(autoincrement())
  user_id         Int
  content         String   @db.Text
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user User @relation(fields: [user_id], references: [user_id])
}

model Message {
  message_id  Int       @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  title       String
  body        String    @db.Text
  is_read     Boolean   @default(false)
  read_at     DateTime?
  is_deleted  Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  sender   User @relation("MessageSender", fields: [sender_id], references: [user_id])
  receiver User @relation("MessageReceiver", fields: [receiver_id], references: [user_id])
}

enum InquiryType {
  buyer
  non_buyer
}

enum InquiryStatus {
  waiting
  read
}

model Inquiry {
  inquiry_id  Int           @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  type        InquiryType
  status      InquiryStatus
  title       String
  content     String        @db.Text
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  sender   User @relation("InquirySender", fields: [sender_id], references: [user_id])
  receiver User @relation("InquiryReceiver", fields: [receiver_id], references: [user_id])

  replies InquiryReply[]
}

model InquiryReply {
  reply_id    Int      @id @default(autoincrement())
  inquiry_id  Int
  receiver_id Int
  content     String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  inquiry Inquiry @relation(fields: [inquiry_id], references: [inquiry_id])
  user    User    @relation(fields: [receiver_id], references: [user_id])
}

model WithdrawRequest {
  withdraw_request_id Int      @id @default(autoincrement())
  user_id             Int
  amount              Int
  status              Status
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  user User @relation(fields: [user_id], references: [user_id])
}

model Prompt {
  prompt_id     Int       @id @default(autoincrement())
  user_id       Int
  title         String    @db.Text
  prompt        String    @db.Text
  prompt_result String    @db.Text
  has_image     Boolean
  description   String    @db.Text
  usage_guide   String    @db.Text
  price         Int
  is_free       Boolean
  download_url  String    @db.Text
  downloads     Int
  views         Int
  likes         Int
  review_counts Int
  rating_avg    Float
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  inactive_date DateTime?

  // Relations
  user           User           @relation(fields: [user_id], references: [user_id])
  images         PromptImage[]
  tags           PromptTag[]
  models         PromptModel[]
  prompt_likes   PromptLike[]
  prompt_reports PromptReport[]
  purchases      Purchase[]
  reviews        Review[]
}

model PromptModel {
  promptmodel_id Int @id @default(autoincrement())
  prompt_id      Int
  model_id       Int

  prompt Prompt @relation(fields: [prompt_id], references: [prompt_id])
  model  Model  @relation(fields: [model_id], references: [model_id])
}

model Model {
  model_id Int    @id @default(autoincrement())
  name     String @db.VarChar(50)

  prompt_models PromptModel[]
}

model PromptTag {
  prompttag_id Int @id @default(autoincrement())
  prompt_id    Int
  tag_id       Int

  prompt Prompt @relation(fields: [prompt_id], references: [prompt_id])
  tag    Tag    @relation(fields: [tag_id], references: [tag_id])
}

model Tag {
  tag_id Int    @id @default(autoincrement())
  name   String @db.VarChar(50)

  prompt_tags PromptTag[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(500)
  userId    Int
  user      User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model UserImage {
  id         Int      @id @default(autoincrement())
  url        String   @db.VarChar(500)
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model PromptImage {
  image_id    Int      @id @default(autoincrement())
  prompt_id   Int
  image_url   String   @db.Text
  order_index Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  prompt Prompt @relation(fields: [prompt_id], references: [prompt_id])
}

model PromptReport {
  report_id   Int      @id @default(autoincrement())
  user_id     Int
  prompt_id   Int
  category_id Int
  content     String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user     User           @relation(fields: [user_id], references: [user_id])
  prompt   Prompt         @relation(fields: [prompt_id], references: [prompt_id])
  category ReportCategory @relation(fields: [category_id], references: [category_id])
}

model ReportCategory {
  category_id Int    @id @default(autoincrement())
  name        String

  prompt_reports PromptReport[]
  details        ReportCategoryDetail[]
}

model ReportCategoryDetail {
  detail_id   Int    @id @default(autoincrement())
  content     String
  category_id Int

  category ReportCategory @relation(fields: [category_id], references: [category_id])
}

model Purchase {
  purchase_id Int      @id @default(autoincrement())
  user_id     Int
  prompt_id   Int
  amount      Int
  is_free     Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user    User     @relation(fields: [user_id], references: [user_id])
  prompt  Prompt   @relation(fields: [prompt_id], references: [prompt_id])
  payment Payment?
}

model Payment {
  payment_id   Int      @id @default(autoincrement())
  purchase_id  Int      @unique
  status       Status
  provider     String   @db.VarChar(50)
  iamport_uid  String
  merchant_uid String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  purchase   Purchase    @relation(fields: [purchase_id], references: [purchase_id])
  settlement Settlement?
}

model Settlement {
  settlement_id Int      @id @default(autoincrement())
  payment_id    Int      @unique
  amount        Int
  fee           Int
  status        Status
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  payment Payment @relation(fields: [payment_id], references: [payment_id])
}

model Review {
  review_id  Int      @id @default(autoincrement())
  rating     Float
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    Int
  prompt_id  Int

  user   User   @relation(fields: [user_id], references: [user_id])
  prompt Prompt @relation(fields: [prompt_id], references: [prompt_id])
}
