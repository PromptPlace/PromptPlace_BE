// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  Pending
  Succeed
  Failed
}

enum Role {
  USER
  ADMIN
}

model User {
  user_id       BigInt   @id @default(autoincrement())
  name          String   @db.VarChar(10)
  nickname      String   @db.VarChar(50)
  email         String   @db.VarChar(255)
  social_type   String   @db.VarChar(50)
  status        Boolean
  inactive_date DateTime?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  role          Role     @default(USER)

  // Relations
profile       UserProfile?
sns_list      UserSNS[]
followings    Following[] @relation("Follower")
followers     Following[] @relation("Following")
notices       Notice[]
tips          Tip[]
notifications Notification[]
messagesSent  Message[] @relation("MessageSender")
messagesReceived Message[] @relation("MessageReceiver")
inquiries     Inquiry[] @relation("InquirySender")
inquiries_received Inquiry[] @relation("InquiryReceiver")
replies       InquiryReply[]
withdraw_requests WithdrawRequest[]
prompts       Prompt[]
prompt_reports PromptReport[]
purchases     Purchase[]
reviews       Review[]
}

model UserProfile {
  profile_id BigInt  @id @default(autoincrement())
  user_id    BigInt  @unique
  description String @db.VarChar(255)
  history     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user        User    @relation(fields: [user_id], references: [user_id])
}

model UserSNS {
  sns_id      BigInt   @id @default(autoincrement())
  user_id     BigInt
  url         String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [user_id])
}

model Following {
  follow_id   BigInt   @id @default(autoincrement())
  follower_id BigInt
  following_id BigInt
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  follower User @relation("Follower", fields: [follower_id], references: [user_id])
  following User @relation("Following", fields: [following_id], references: [user_id])
}

model Notice {
  notice_id  BigInt   @id @default(autoincrement())
  writer_id  BigInt
  title      String
  content    String   @db.Text
  is_pinned  Boolean
  is_visible Boolean
  file_url   String?  @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  writer User @relation(fields: [writer_id], references: [user_id])
}

model Tip {
  tip_id      BigInt   @id @default(autoincrement())
  writer_id   BigInt
  title       String
  content     String   @db.Text
  is_visible  Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  writer User @relation(fields: [writer_id], references: [user_id])
}

model Notification {
  notification_id BigInt   @id @default(autoincrement())
  user_id         BigInt
  content         String   @db.Text
  created_at      DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [user_id])
}

model Message {
  message_id BigInt   @id @default(autoincrement())
  sender_id   BigInt
  receiver_id BigInt
  title      String   
  body       String   @db.Text
  is_read    Boolean  @default(false)
  read_at    DateTime?
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  sender   User @relation("MessageSender", fields: [sender_id], references: [user_id])
  receiver User @relation("MessageReceiver", fields: [receiver_id], references: [user_id])
}

enum InquiryType {
  buyer
  non_buyer
}

enum InquiryStatus {
  waiting
  read
}

model Inquiry {
  inquiry_id   BigInt   @id @default(autoincrement())
  sender_id    BigInt
  receiver_id  BigInt
  type         InquiryType
  status       InquiryStatus
  title        String
  content      String   @db.Text
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  sender   User @relation("InquirySender", fields: [sender_id], references: [user_id])
  receiver User @relation("InquiryReceiver", fields: [receiver_id], references: [user_id])

  replies InquiryReply[]
}

model InquiryReply {
  reply_id    BigInt   @id @default(autoincrement())
  inquiry_id  BigInt
  receiver_id     BigInt
  content     String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  inquiry Inquiry @relation(fields: [inquiry_id], references: [inquiry_id])
  user    User    @relation(fields: [receiver_id], references: [user_id])
}

model WithdrawRequest {
  withdraw_request_id  BigInt   @id @default(autoincrement())
  user_id     BigInt
  amount      Int
  status      Status
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [user_id])
}

model Prompt {
  prompt_id     BigInt   @id @default(autoincrement())
  user_id       BigInt
  title         String    @db.Text
  prompt         String   @db.Text
  prompt_result  String   @db.Text
  has_image     Boolean
  description    String   @db.Text
  usage_guide    String   @db.Text
  price         Int
  is_free       Boolean
  downloads     BigInt
  views         BigInt
  likes         BigInt
  review_counts BigInt
  rating_avg    Float
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  inactive_date  DateTime?

  // Relations
  user        User      @relation(fields: [user_id], references: [user_id])
  images      PromptImage[]
  tags        PromptTag[]
  models      PromptModel[]
  prompt_reports PromptReport[]
  purchases   Purchase[]
  reviews     Review[]
}

model PromptModel {
  promptmodel_id BigInt @id @default(autoincrement())
  prompt_id      BigInt
  model_id       BigInt

  prompt Prompt @relation(fields: [prompt_id], references: [prompt_id])
  model  Model  @relation(fields: [model_id], references: [model_id])
}

model Model {
  model_id BigInt @id @default(autoincrement())
  name     String @db.VarChar(50)

  prompt_models PromptModel[]
}

model PromptTag {
  prompttag_id BigInt @id @default(autoincrement())
  prompt_id    BigInt
  tag_id       BigInt

  prompt Prompt @relation(fields: [prompt_id], references: [prompt_id])
  tag    Tag    @relation(fields: [tag_id], references: [tag_id])
}

model Tag {
  tag_id BigInt  @id @default(autoincrement())
  name   String  @db.VarChar(50)

  prompt_tags    PromptTag[]
}

model PromptImage {
  image_id   BigInt   @id @default(autoincrement())
  prompt_id  BigInt
  image_url  String   @db.Text
  order_index Int
  created_at DateTime @default(now())
  updated_at   DateTime @updatedAt

  prompt Prompt @relation(fields: [prompt_id], references: [prompt_id])
}

model PromptReport {
  report_id   Int      @id @default(autoincrement())
  user_id     BigInt
  prompt_id   BigInt
  category_id Int
  content     String   @db.Text
  created_at  DateTime @default(now())
  updated_at   DateTime @updatedAt

  user     User             @relation(fields: [user_id], references: [user_id])
  prompt   Prompt           @relation(fields: [prompt_id], references: [prompt_id])
  category ReportCategory   @relation(fields: [category_id], references: [category_id])
}

model ReportCategory {
  category_id Int    @id @default(autoincrement())
  name        String

  prompt_reports PromptReport[]
  details ReportCategoryDetail[]
}

model ReportCategoryDetail {
  detail_id   Int    @id @default(autoincrement())
  content     String
  category_id Int

  category ReportCategory @relation(fields: [category_id], references: [category_id])
}

model Purchase {
  purchase_id  BigInt   @id @default(autoincrement())
  user_id      BigInt
  prompt_id    BigInt
  amount       Int
  is_free      Boolean
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user         User     @relation(fields: [user_id], references: [user_id])
  prompt       Prompt   @relation(fields: [prompt_id], references: [prompt_id])
  payment      Payment?
}

model Payment {
  payment_id   BigInt   @id @default(autoincrement())
  purchase_id  BigInt   @unique
  status       Status
  provider     String   @db.VarChar(50)
  iamport_uid  String
  merchant_uid String
  created_at DateTime @default(now())
  updated_at    DateTime @updatedAt

  purchase     Purchase @relation(fields: [purchase_id], references: [purchase_id])
  settlement   Settlement?
}

model Settlement {
  settlement_id BigInt   @id @default(autoincrement())
  payment_id    BigInt   @unique
  amount        Int
  fee           Int
  status        Status
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  payment Payment @relation(fields: [payment_id], references: [payment_id])
}

model Review {
  review_id  BigInt      @id @default(autoincrement())
  rating     Float
  content    String      @db.Text
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  user_id    BigInt
  prompt_id  BigInt

  user   User   @relation(fields: [user_id], references: [user_id])
  prompt Prompt @relation(fields: [prompt_id], references: [prompt_id])
}
