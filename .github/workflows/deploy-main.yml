name: deploy-main
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure SSH with Keep Alive
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat >>~/.ssh/config <<END
          Host promptplace
            HostName $EC2_HOST
            User $EC2_USER
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
            ServerAliveInterval 60
            ServerAliveCountMax 3
            TCPKeepAlive yes
            ConnectTimeout 30
          END
        env:
          EC2_USER: ubuntu
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      - name: Copy Workspace
        run: |
          ssh promptplace 'sudo mkdir -p /opt/app'
          ssh promptplace 'sudo chown ubuntu:ubuntu /opt/app'
          scp -r ./[!.]* promptplace:/opt/app
      - name: Install dependencies
        run: |
          ssh promptplace 'pnpm install --prefix /opt/app/'
      - name: Copy systemd service file
        run: |
          ssh promptplace '
            echo "[Unit]
            Description=PromptPlace Backend
            After=network.target
            [Service]
            User=${USER}
            ExecStart=/usr/bin/pnpm run dev --prefix /opt/app/
            Restart=always
            [Install]
            WantedBy=multi-user.target" | sudo tee /etc/systemd/system/app.service
          '
      - name: Enable systemd service
        run: |
          ssh promptplace 'sudo systemctl daemon-reload'
          ssh promptplace 'sudo systemctl enable app'
      - name: Restart systemd service
        run: |
          ssh promptplace 'sudo systemctl restart app'
      - name: Setup Environment
        timeout-minutes: 2
        run: |
          ssh promptplace '
            cd /opt/app &&
            cat <<EOF > .env
          ${{ secrets.ENV_CONTENT }}
          EOF
            echo "Environment setup completed"
          '
      - name: Fix Failed Migration
        timeout-minutes: 3
        run: |
          ssh promptplace '
            cd /opt/app &&
            echo "=== Resolving failed migration ===" &&
            npx prisma migrate resolve --rolled-back "20250709151206_change_bigint_to_int" &&
            echo "Failed migration resolved successfully"
          '
      - name: Deploy All Migrations
        timeout-minutes: 5
        run: |
          ssh promptplace '
            cd /opt/app &&
            echo "=== Deploying all pending migrations ===" &&
            npx prisma migrate deploy &&
            echo "All migrations deployed successfully"
          '
      - name: Verify Migration Status
        timeout-minutes: 2
        run: |
          ssh promptplace '
            cd /opt/app &&
            echo "=== Final migration status ===" &&
            npx prisma migrate status &&
            echo "=== Migration verification completed ==="
          '
